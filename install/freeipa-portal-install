#!/usr/bin/python

import logging
import os
import shutil
import sys
import argparse
import socket
import time
import subprocess

from ipalib import api

LOGFILE = '/var/log/freeipa-portal-install.log'
PORTAL_CONF = '/etc/freeipa_community_portal.ini'
HTTPD_CONF = '/etc/httpd/conf.d/freeipa_community_portal.conf'
VAR_DIR = '/var/lib/freeipa_community_portal'
WSGI_DIR = '/var/www/wsgi'
EXECUTABLE = '/freeipa_community_portal.wsgi'
PORTAL_CONF_SRC = sys.prefix + '/share/freeipa_community_portal/conf/freeipa_community_portal.ini'

logger = logging.getLogger()

# borrowing a bunch of code from the ipsilon installer
def openlogs():
    # we're operating on the global logger
    global logger
    
    # if the logfile is actual a file
    if os.path.isfile(LOGFILE):
        try:
            # we're gonna move it and mark it with the time? i guess?
            created = '%s' % time.ctime(os.path.getctime(LOGFILE))
            shutil.move(LOGFILE, '%s.%s' % (LOGFILE, created))
        except IOError:
            # and if we can't? pftt. no problem 
            pass
    
    # now we set the logger
    logger = logging.getLogger()

    # first, we set up the error logger
    try:
        # and tell it to use the logfile specified earlier
        lh = logging.FileHandler(LOGFILE)
    except IOError as e:
        # if we can't access that file, print an error message
        print >> sys.stderr, 'Unable to open %s (%s)' % (LOGFILE, str(e))
        # and log to stdout
        lh = logging.StreamHandler(sys.stderr)
    formatter = logging.Formatter('[%(asctime)s] %(message)s')
    lh.setFormatter(formatter)
    lh.setLevel(logging.DEBUG)
    logger.addHandler(lh)
    logger.propagate = False

    # then we set up the info logger, which just spews to stdout
    ch = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter('%(message)s')
    ch.setFormatter(formatter)
    ch.setLevel(logging.INFO)
    logger.addHandler(ch)
    # TODO: do we need cherrypy here?

def create_ipa_user():
    pass
    # subprocess.call('ipa privilege-add \'Portal privileges\' --desc=\'Portal privileges\'')
    # ipa privilege-add 'Portal management' --desc='Portal management'
    # ipa privilege-add-permission 'Portal management'
    #       --permission='System: Add Users'
    #       --permission='System: Change User password'
    #       --permission='System: Read UPG Definition'
    #       --permission='System: Add User to default group'
    # ipa role-add 'Portal' --desc="self-service portals"
    # ipa role-add-privilege 'Portal' --privilege='Portal management'
    # ipa useradd --first='Self' --last="Service" portal
    # ipa role-add-member --users=portal 'Portal'
    # ipa-getkeytab -s cypher.derny.test -p portal@DERNY.TEST -k /etc/ipa/ipa-rest.keytab
    # add permissions System: Add Users, System: Change User password
    

def parse_args():
    """parses the command line arguments passed in

    return: a list of 
    """
    parser = argparse.ArgumentParser(description='FreeIPA Portal Install Options')
    parser.add_argument('--version', action='version', version='%(prog)s 0.1')
    parser.add_argument('--uninstall', action='store_true',
        help="Uninstall the server and all data")
    parser.add_argument('--no-apache-conf', action='store_true',
        help="Do not generate the Apache config. Use if custom apache config will be used")
                        
    return vars(parser.parse_args())

def install(opts):
    logger.info('Installation started')

    # first things first, if the user hasn't supplied a config file, then 
    # give them one with sane defaults
    if not os.path.isfile(PORTAL_CONF):
        logger.warning('no portal config, creating one that might not work')
        # TODO: get source conf file location
        shutil.copy(PORTAL_CONF_SRC, PORTAL_CONF)

    # if the user has not explicitly requested, create the apache conf
    if not ('no-apache-conf' in opts and opts['no-apache-conf'] is True):
        logger.warning('generating apache config file!')
        shutil.copy(sys.prefix + '/share/freeipa_community_portal/conf/httpd.conf', HTTPD_CONF)

    # create a /var/lib/freeipa-community-portal, if it does not exist
    # this is where our databases live
    if not os.path.exists(VAR_DIR):
        os.makedirs(VAR_DIR)
        subprocess.call(["chown", "apache:apache", db])

    # create the database files, if they do not exist
    # for db in (VAR_DIR + '/resets.db', VAR_DIR + '/captcha.db'):
        # if not os.path.exists(db):
            # open(db, 'a').close()
            # subprocess.call(["chown", "apache:apache", db])

    # create a key for the captcha
    with open(VAR_DIR + '/key', 'w') as fp:
        logger.info('writing captcha key file')
        fp.write(os.urandom(8))

    # set httpd_can_sendmail so that we send mail instead of crashing
    logger.info('setting httpd_can_sendmail SELinux bool')
    subprocess.call(['setsebool', '-P',  'httpd_can_sendmail', 'on'])

    # create a directory to store our public scripts.
    if not os.path.exists(WSGI_DIR):
        logger.info('creating directory for WSGI script')
        os.makedirs(WSGI_DIR)
    # remove a file that already exists, if there is one
    if os.path.isfile(WSGI_DIR + EXECUTABLE):
        logger.warning('executable already exists, overwriting!')
        os.remove(WSGI_DIR + EXECUTABLE)
    # and then symlink the executable from libexec to the public script dir
    logger.info('symlinking WSGI executable')
    os.symlink(sys.prefix + '/libexec' + EXECUTABLE, WSGI_DIR + EXECUTABLE)

def uninstall(opts):
    logger.info('Uninstallation started')

    # remove the portal config
    if os.path.isfile(PORTAL_CONF):
        logger.info('deleting portal config ' + PORTAL_CONF)
        # TODO: get source conf file location
        os.remove(PORTAL_CONF)

    # delete the apache config
    logger.info('deleting HTTPD config')
    if os.path.isfile(HTTPD_CONF):
        os.remove(HTTPD_CONF)

    # delete /var/lib/freeipa-community-portal and everything in it
    # this is where our databases and key lived
    logger.info('deleting ' + VAR_DIR)
    if os.path.exists(VAR_DIR):
        shutil.rmtree(VAR_DIR)

    # set httpd_can_sendmail to true so that we send mail instead of crashing
    # TODO: what if the user uses this bool for something different after?
    # logger.info('setting httpd_can_sendmail SELinux bool')
    # subprocess.call(['setsebool', 'httpd_can_sendmail', 'on'])

    # remove the wsgi script, if it exists. 
    # leave the wsgi directory. idk it feels like something else might use that
    if os.path.isfile(WSGI_DIR + EXECUTABLE):
        logger.info('deleting wsgi symlink')
        os.remove(WSGI_DIR + EXECUTABLE)
    
    
def isUninstall(opts):
    return 'uninstall' in opts and opts['uninstall'] is True

if __name__ == '__main__':
    opts = []
    out = 0
    openlogs()

    try: 
        opts = parse_args()
        logger.setLevel(logging.DEBUG)

        logger.debug('Installation arguments:')
        for k in sorted(opts.iterkeys()):
            logger.debug('%s: %s', k, opts[k])

        if isUninstall(opts):
            uninstall(opts)
        else:
            install(opts)

    except Exception as e:
        logger.exception(e)
        if isUninstall(opts):
            logger.info('Uninstallation aborted')
        else:
            logger.info('Installation aborted')
        logger.info('See log file %s for details' % LOGFILE)
        out = 1
    except SystemExit:
        out = 1
        raise
    finally:
        if out == 0:
            if isUninstall(opts):
                logger.info('Uninstallation complete')
            else:
                logger.info('Installation complete')
                logger.info('Please restart httpd to enable the portal')
        sys.exit(out)
